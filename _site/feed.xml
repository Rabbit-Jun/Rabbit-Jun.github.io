<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-19T15:05:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">RabbitJun’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">iee754</title><link href="http://localhost:4000/computer_structure/2024/11/19/ieee754.html" rel="alternate" type="text/html" title="iee754" /><published>2024-11-19T00:00:00+09:00</published><updated>2024-11-19T00:00:00+09:00</updated><id>http://localhost:4000/computer_structure/2024/11/19/ieee754</id><content type="html" xml:base="http://localhost:4000/computer_structure/2024/11/19/ieee754.html"><![CDATA[<h1 id="ieee">ieee?</h1>
<p>ieee는</p>]]></content><author><name></name></author><category term="computer_structure" /><summary type="html"><![CDATA[ieee? ieee는]]></summary></entry><entry><title type="html">main2</title><link href="http://localhost:4000/hnv/2024/11/14/clonecoding5.html" rel="alternate" type="text/html" title="main2" /><published>2024-11-14T00:00:00+09:00</published><updated>2024-11-14T00:00:00+09:00</updated><id>http://localhost:4000/hnv/2024/11/14/clonecoding5</id><content type="html" xml:base="http://localhost:4000/hnv/2024/11/14/clonecoding5.html"><![CDATA[<h1 id="class-에서-모르는-것만-하자">class 에서 모르는 것만 하자</h1>
<p>이제는 시간이 별로 없다.<br />
그냥 대충 해야겠다.</p>

<p><code class="language-plaintext highlighter-rouge">todolist()</code>는 파이썬에서 리스트나 배열 등을 리스트 타입으로 변환해주는 함수입니다. 주로 아래와 같은 상황에서 사용됩니다.</p>

<p>Pandas Series나 DataFrame의 특정 열을 리스트로 변환할 때:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">col1</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="sh">'</span><span class="s">col2</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="n">col1_list</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">col1</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>  <span class="c1"># [1, 2, 3]
</span>
</code></pre></div></div>

<p>Numpy 배열을 리스트로 변환할 때:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np
array = np.array([1, 2, 3])
list_from_array = array.tolist()  # [1, 2, 3]
</code></pre></div></div>]]></content><author><name></name></author><category term="hnv" /><summary type="html"><![CDATA[class 에서 모르는 것만 하자 이제는 시간이 별로 없다. 그냥 대충 해야겠다.]]></summary></entry><entry><title type="html">dataset</title><link href="http://localhost:4000/hnv/2024/11/14/dataset.html" rel="alternate" type="text/html" title="dataset" /><published>2024-11-14T00:00:00+09:00</published><updated>2024-11-14T00:00:00+09:00</updated><id>http://localhost:4000/hnv/2024/11/14/dataset</id><content type="html" xml:base="http://localhost:4000/hnv/2024/11/14/dataset.html"><![CDATA[<p>```python
import os
import glob</p>

<p>import numpy as np
from PIL import Image
import torch
from torch.utils.data import DataLoader
from torchvision import transforms
from sklearn.model_selection import train_test_split
import lightning as L</p>

<p>SEED = 36
L.seed_everything(SEED)</p>

<p>class ImageNetDataModule(L.LightningDataModule):
    def <strong>init</strong>(self, data_path: str = ‘../../dataset’, batch_size: int = 32, mode: str = ‘train’):
        super().<strong>init</strong>()
        self.mode = mode
        if self.mode == ‘train’:
            self.dataset = glob.glob(os.path.join(data_path, ‘<em>/</em>.jpeg’))
        else:
            self.data_path = data_path
            batch_size = 1</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    self.batch_size = batch_size
    self.transform = transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
        transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
        ])

def setup(self, stage: str):
    if self.trainer is not None:
        if self.batch_size % self.trainer.world_size != 0:
            raise RuntimeError(
                f"Batch size ({self.batch_size}) is not divisible by the number of devices ({self.trainer.world_size})."
            )
        self.batch_size_per_device = self.batch_size // self.trainer.world_size

    if self.mode == 'train':
        class_data = list(map(lambda path: os.path.basename(os.path.dirname(path)).split('-', 1), self.dataset))
        class_ids, _ = zip(*class_data)
        train_x, val_x, train_y, val_y = train_test_split(self.dataset, class_ids, test_size=0.2, stratify=class_ids)
        val_x, test_x, val_y, test_y = train_test_split(val_x, val_y, test_size=0.5, stratify=val_y)

        train_data = [(x, y) for x, y in zip(train_x, train_y)]
        val_data = [(x, y) for x, y in zip(val_x, val_y)]
        test_data = [(x, y) for x, y in zip(test_x, test_y)]
    else:
        pred_data = [Image.open(self.data_path).convert('RGB')]

    if stage == 'fit':
        self.train_dataset = train_data
        self.val_dataset = val_data
    
    if stage == 'test':
        self.test_dataset = test_data

    if stage == 'predict':
        self.pred_dataset = pred_data

def _train_collate_fn(self, batch):
    images, labels = zip(*batch)
    images = [self.transform(Image.open(img).convert('RGB')) for img in images]
    labels = torch.tensor([int(label) for label in labels], dtype=torch.long)
    return torch.stack(images), labels

def _predict_collate_fn(self, batch):
    img = batch[0]
    input = self.transform(img).unsqueeze(0)
    return input, np.array(img)

def train_dataloader(self):
    return DataLoader(self.train_dataset, batch_size=self.batch_size_per_device, shuffle=True, collate_fn=self._train_collate_fn)

def val_dataloader(self):
    return DataLoader(self.val_dataset, batch_size=self.batch_size_per_device, shuffle=False, collate_fn=self._train_collate_fn)

def test_dataloader(self):
    return DataLoader(self.test_dataset, batch_size=self.batch_size_per_device, shuffle=False, collate_fn=self._train_collate_fn)

def predict_dataloader(self):
    return DataLoader(self.pred_dataset, batch_size=self.batch_size_per_device, shuffle=False, collate_fn=self._predict_collate_fn)  ```         0.
</code></pre></div></div>]]></content><author><name></name></author><category term="hnv" /><summary type="html"><![CDATA[```python import os import glob]]></summary></entry><entry><title type="html">paranoma</title><link href="http://localhost:4000/computervision/2024/11/13/project.html" rel="alternate" type="text/html" title="paranoma" /><published>2024-11-13T00:00:00+09:00</published><updated>2024-11-13T00:00:00+09:00</updated><id>http://localhost:4000/computervision/2024/11/13/project</id><content type="html" xml:base="http://localhost:4000/computervision/2024/11/13/project.html"><![CDATA[<h1 id="환경-설정하기-poetry">환경 설정하기 (poetry)</h1>
<ol>
  <li>conda로 가상환경을 만들어준다</li>
  <li>활성화된 가상환경에서 <code class="language-plaintext highlighter-rouge">pip install poetry</code></li>
  <li><code class="language-plaintext highlighter-rouge">poetry config virtualenvs.create false</code> poetry의 가상환경 생성 기능 비활성화</li>
  <li><code class="language-plaintext highlighter-rouge">poetry init</code></li>
  <li><code class="language-plaintext highlighter-rouge">poetry add opencv-python PyQt6</code></li>
</ol>

<h1 id="환경-설정하기-conda">환경 설정하기 (conda)</h1>
<ol>
  <li>수동으로 <code class="language-plaintext highlighter-rouge">enviroment.yml</code>을 작성</li>
  <li><code class="language-plaintext highlighter-rouge">conda env create -f environment.yaml</code> 를 해주면 됨</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add pyinstaller(visionagent) PS C:\Users\junun\documents\visionproject\projects\visionagent&gt; poetry add pyinstaller
Using version ^6.11.1 for pyinstaller

Updating dependencies
Resolving dependencies... (0.2s)

The current project's supported Python range (&gt;=3.10,&lt;4.0) is not compatible with some of the required packages Python requirement:
  - pyinstaller requires Python &lt;3.14,&gt;=3.8, so it will not be satisfied for Python &gt;=3.14,&lt;4.0

Because no versions of pyinstaller match &gt;6.11.1,&lt;7.0.0
 and pyinstaller (6.11.1) requires Python &lt;3.14,&gt;=3.8, pyinstaller is forbidden.
So, because vision depends on pyinstaller (^6.11.1), version solving failed.

  • Check your dependencies Python requirement: The Python requirement can be specified via the python or markers properties

    For pyinstaller, a possible solution would be to set the python property to "&gt;=3.10,&lt;3.14"

    https://python-poetry.org/docs/dependency-specification/#python-restricted-dependencies,
    https://python-poetry.org/docs/dependency-specification/#using-environment-markers
</code></pre></div></div>
<p>하면서 python의 버전이 맞지 않는 다는 에러가 발생했다.</p>

<h3 id="해결-방법">해결 방법</h3>
<ol>
  <li><code class="language-plaintext highlighter-rouge">toml</code> 파일에서 python 버전 범위를 바꿔줬다</li>
  <li><code class="language-plaintext highlighter-rouge">poetry lock</code>을 통해 의존성 파일 업데이트</li>
  <li><code class="language-plaintext highlighter-rouge">poetry install</code> 의존성을 다시 설치</li>
</ol>

<p>만약 poetry로 안했다면 뭐가 문제인지 한참을 해맸을까… 무섭다…</p>

<h3 id="pyinstaller-설치">pyinstaller 설치</h3>
<ol>
  <li><code class="language-plaintext highlighter-rouge">pip install pyinstaller</code> (<em>poetry add  pyinstaller</em>)</li>
  <li><code class="language-plaintext highlighter-rouge">pyinstaller --onefile src/paranoma.py</code></li>
  <li>생성된  dist 폴더에서 실행 <code class="language-plaintext highlighter-rouge">dist/paranoma.exe</code></li>
</ol>]]></content><author><name></name></author><category term="computervision" /><summary type="html"><![CDATA[환경 설정하기 (poetry) conda로 가상환경을 만들어준다 활성화된 가상환경에서 pip install poetry poetry config virtualenvs.create false poetry의 가상환경 생성 기능 비활성화 poetry init poetry add opencv-python PyQt6]]></summary></entry><entry><title type="html">paranoma</title><link href="http://localhost:4000/computervision/2024/11/12/chap6-5.html" rel="alternate" type="text/html" title="paranoma" /><published>2024-11-12T00:00:00+09:00</published><updated>2024-11-12T00:00:00+09:00</updated><id>http://localhost:4000/computervision/2024/11/12/chap6-5</id><content type="html" xml:base="http://localhost:4000/computervision/2024/11/12/chap6-5.html"><![CDATA[<h1 id="sift를-이용한-영상-봉합">SIFT를 이용한 영상 봉합</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">PyQt6.QtWidgets</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">winsound</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="k">class</span> <span class="nc">Panorama</span><span class="p">(</span><span class="n">QMainWindow</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setWindowTitle</span><span class="p">(</span><span class="sh">"</span><span class="s">파노라마 영상</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>

        <span class="n">collectButton</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">영상 수집</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">showButton</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">영상 보기</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">봉합</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">저장</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">quitButton</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">나가기</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">label</span> <span class="o">=</span> <span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">환영합니다!</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>

        <span class="n">collectButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">showButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">110</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">210</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">310</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">quitButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">450</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">170</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">showButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

        <span class="n">collectButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">collectFunction</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">showButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">showFunction</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">stitchFunction</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">saveFunction</span><span class="p">)</span>
        <span class="n">quitButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">quitFunction</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">collectFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">showButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span> <span class="c1"># 버튼 비활성
</span>        <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">c를 여러 번 눌러 수집하고 끝나면 q를 눌러 비디오를 끕니다.</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CAP_DSHOW</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">():</span><span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="sh">"</span><span class="s">카메라 연결 실패</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">imgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span><span class="k">break</span>

            <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">"</span><span class="s">video display</span><span class="sh">"</span><span class="p">,</span> <span class="n">frame</span><span class="p">)</span>

            <span class="n">key</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>  <span class="c1"># 영상 저장
</span>            <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="sh">"</span><span class="s">q</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">destroyWindow</span><span class="p">(</span><span class="sh">"</span><span class="s">video display</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>  <span class="c1"># 수집한 영상이 2장 이상이면 버튼 활성화
</span>            <span class="n">self</span><span class="p">.</span><span class="n">showButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">stitchButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">saveButton</span><span class="p">.</span><span class="nf">setEnabled</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">showFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">수집된 영상은 </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">))</span> <span class="o">+</span> <span class="sh">"</span><span class="s">장 입니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">)):</span>
            <span class="n">stack</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">((</span><span class="n">stack</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dsize</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)))</span>
        <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">"</span><span class="s">Image collection</span><span class="sh">"</span><span class="p">,</span> <span class="n">stack</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">stitchFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">stitcher</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nc">Stitcher_create</span><span class="p">()</span>  <span class="c1"># sticher 객체 생성
</span>        <span class="n">status</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">img_stitched</span> <span class="o">=</span> <span class="n">stitcher</span><span class="p">.</span><span class="nf">stitch</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imgs</span><span class="p">)</span>  <span class="c1"># 봉합 성공 여부와 봉합된 영상을 반환
</span>        <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="n">cv2</span><span class="p">.</span><span class="n">STITCHER_OK</span><span class="p">:</span>  <span class="c1"># 스티칭 작업이 성공적으로 완료되면
</span>            <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">"</span><span class="s">Image stitched panorama</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">img_stitched</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">winsound</span><span class="p">.</span><span class="nc">Beep</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="sh">"</span><span class="s">파노라마 제작에 실패했습니다. 다시 시도하세요.</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">saveFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">fname</span> <span class="o">=</span> <span class="n">QFileDialog</span><span class="p">.</span><span class="nf">getSaveFileName</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">파일 저장</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">./</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">fname</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">self</span><span class="p">.</span><span class="n">img_stitched</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">quitFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
        <span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span>
<span class="n">win</span> <span class="o">=</span> <span class="nc">Panorama</span><span class="p">()</span>
<span class="n">win</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="nf">exec</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>QFileDialog는 PyQt와 Qt 라이브러리에서 제공하는 파일 선택 대화 상자입니다. 사용자가 파일이나 폴더를 열거나 저장할 때 파일 경로를 쉽게 선택할 수 있도록 GUI 대화 상자를 제공합니다.

QFileDialog는 일반적으로 파일을 열기, 저장하거나 특정 디렉토리 선택 기능이 필요할 때 사용됩니다.

주요 기능과 메서드
QFileDialog는 다음과 같은 기능을 제공합니다.

파일 열기 (getOpenFileName): 파일을 선택하는 대화 상자를 열고, 사용자가 선택한 파일의 경로를 반환합니다.
여러 파일 열기 (getOpenFileNames): 여러 파일을 선택할 수 있는 대화 상자를 열고, 선택한 파일들의 경로 목록을 반환합니다.
파일 저장 (getSaveFileName): 파일을 저장할 위치를 선택할 수 있는 대화 상자를 열어, 사용자가 선택한 파일 경로를 반환합니다.
디렉토리 선택 (getExistingDirectory): 폴더를 선택할 수 있는 대화 상자를 열고, 선택한 폴더의 경로를 반환합니다.
</code></pre></div></div>

<p>왜 봉합이 안되나 했더니</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>같은 이미지로 스티칭 시도 시 발생하는 일:
이미지 간 겹침이 없음: stitch() 함수는 여러 이미지를 겹치는 부분을 찾아서 이어붙입니다. 하지만 같은 이미지를 주면, 겹칠 부분이 없기 때문에 이미지 매칭을 제대로 할 수 없습니다.
스티칭 실패: 동일한 이미지를 입력하면, 스티칭에 실패하거나 결과가 제대로 나오지 않습니다. cv2.Stitcher_create() 함수는 두 이미지 이상의 다양한 정보와 겹침 영역을 필요로 하기 때문에 같은 이미지를 주면 스티칭 작업이 불가능합니다.
</code></pre></div></div>]]></content><author><name></name></author><category term="computervision" /><summary type="html"><![CDATA[SIFT를 이용한 영상 봉합 ```python from PyQt6.QtWidgets import * import cv2 import numpy as np import winsound import sys]]></summary></entry><entry><title type="html">special effect2</title><link href="http://localhost:4000/computervision/2024/11/12/chap6-7.html" rel="alternate" type="text/html" title="special effect2" /><published>2024-11-12T00:00:00+09:00</published><updated>2024-11-12T00:00:00+09:00</updated><id>http://localhost:4000/computervision/2024/11/12/chap6-7</id><content type="html" xml:base="http://localhost:4000/computervision/2024/11/12/chap6-7.html"><![CDATA[<h1 id="영상에서-특수-효과">영상에서 특수 효과</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span> <span class="k">as</span> <span class="n">cv</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">PyQt6.QtWidgets</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="k">class</span> <span class="nc">VideoSpecialEffect</span><span class="p">(</span><span class="n">QMainWindow</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setWindowTitle</span><span class="p">(</span><span class="sh">'</span><span class="s">비디오 특수 효과</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">400</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>

        <span class="n">videoButton</span><span class="o">=</span><span class="nc">QPushButton</span><span class="p">(</span><span class="sh">'</span><span class="s">비디오 시작</span><span class="sh">'</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pickCombo</span><span class="o">=</span><span class="nc">QComboBox</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pickCombo</span><span class="p">.</span><span class="nf">addItems</span><span class="p">([</span><span class="sh">'</span><span class="s">엠보싱</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">카툰</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">연필 스케치(명암)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">연필 스케치(컬러)</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s"> 유화</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">quitButton</span><span class="o">=</span><span class="nc">QPushButton</span><span class="p">(</span><span class="sh">'</span><span class="s">나가기</span><span class="sh">'</span><span class="p">,</span><span class="n">self</span><span class="p">)</span>

        <span class="n">videoButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">140</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pickCombo</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>
        <span class="n">quitButton</span><span class="p">.</span><span class="nf">setGeometry</span><span class="p">(</span><span class="mi">280</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>

        <span class="n">videoButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">videoSpecialEffectFunction</span><span class="p">)</span>
        <span class="n">quitButton</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">quitFunction</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">videoSpecialEffectFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">cv</span><span class="p">.</span><span class="n">CAP_DSHOW</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">():</span> <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="sh">'</span><span class="s">카메라 연결 실패</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">ret</span><span class="p">,</span><span class="n">frame</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span> <span class="k">break</span>

            <span class="n">pick_effect</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">pickCombo</span><span class="p">.</span><span class="nf">currentIndex</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">pick_effect</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">femboss</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">],[</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">],[</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">]])</span>
                <span class="n">gray</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
                <span class="n">gray16</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">int16</span><span class="p">(</span><span class="n">gray</span><span class="p">)</span>
                <span class="n">special_img</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">uint8</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">cv</span><span class="p">.</span><span class="nf">filter2D</span><span class="p">(</span><span class="n">gray16</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">femboss</span><span class="p">)</span><span class="o">+</span><span class="mi">128</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">pick_effect</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">special_img</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="nf">stylization</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span><span class="n">sigma_s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span><span class="n">sigma_r</span><span class="o">=</span><span class="mf">0.45</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">pick_effect</span><span class="o">==</span><span class="mi">2</span><span class="p">:</span>
                <span class="n">special_img</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="nf">pencilSketch</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span><span class="n">sigma_s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span><span class="n">sigma_r</span><span class="o">=</span><span class="mf">0.07</span><span class="p">,</span><span class="n">shade_factor</span><span class="o">=</span><span class="mf">0.02</span><span class="p">)</span>    
            <span class="k">elif</span> <span class="n">pick_effect</span><span class="o">==</span><span class="mi">3</span><span class="p">:</span>
                <span class="n">_</span><span class="p">,</span><span class="n">special_img</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="nf">pencilSketch</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span><span class="n">sigma_s</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span><span class="n">sigma_r</span><span class="o">=</span><span class="mf">0.07</span><span class="p">,</span> <span class="n">shade_factor</span><span class="o">=</span><span class="mf">0.02</span><span class="p">)</span> 
            <span class="k">elif</span> <span class="n">pick_effect</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span>
                <span class="n">special_img</span><span class="o">=</span><span class="n">cv</span><span class="p">.</span><span class="n">xphoto</span><span class="p">.</span><span class="nf">oilPainting</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2Lab</span><span class="p">)</span> 
            
            <span class="n">cv</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Special effect</span><span class="sh">'</span><span class="p">,</span><span class="n">special_img</span><span class="p">)</span>
            <span class="n">cv</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                                    
    <span class="k">def</span> <span class="nf">quitFunction</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cap</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
        <span class="n">cv</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="n">app</span><span class="o">=</span><span class="nc">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span>
<span class="n">win</span><span class="o">=</span><span class="nc">VideoSpecialEffect</span><span class="p">()</span>
<span class="n">win</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="nf">exec</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="computervision" /><summary type="html"><![CDATA[영상에서 특수 효과]]></summary></entry><entry><title type="html">special effect</title><link href="http://localhost:4000/computervision/2024/11/12/chap6-6.html" rel="alternate" type="text/html" title="special effect" /><published>2024-11-12T00:00:00+09:00</published><updated>2024-11-12T00:00:00+09:00</updated><id>http://localhost:4000/computervision/2024/11/12/chap6-6</id><content type="html" xml:base="http://localhost:4000/computervision/2024/11/12/chap6-6.html"><![CDATA[<h1 id="사진-영상에-특수-효과-처리">사진 영상에 특수 효과 처리</h1>
<pre><code class="language-pyhton">import cv2
import numpy as np
from PyQt6.QtWidgets import *
import sys


class SpecialEffect(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("사진 특수 효과")
        self.setGeometry(200, 200, 800, 200)

        pictureButton = QPushButton("사진 읽기", self)
        embossButton = QPushButton("엠보싱", self)
        cartoonButton = QPushButton("카툰", self)
        sketchButton = QPushButton("연필 스케치", self)
        oilButton = QPushButton("유화", self)
        saveButton = QPushButton("저장하기", self)
        self.pickCombo = QComboBox(self)
        self.pickCombo.addItems(["엠보싱", "카툰", "연필 스케치(명암)", "연필 스케치(컬러)", "유화"])
        quitButton = QPushButton("나가기", self)
        self.label = QLabel("환영합니다!", self)

        pictureButton.setGeometry(10, 10, 100, 30)
        embossButton.setGeometry(110, 10, 100, 30)
        cartoonButton.setGeometry(210, 10, 100, 30)
        sketchButton.setGeometry(310, 10, 100, 30)
        oilButton.setGeometry(410, 10, 100, 30)
        saveButton.setGeometry(510, 10, 100, 30)
        self.pickCombo.setGeometry(510, 40, 110, 30)
        quitButton.setGeometry(620, 10, 100, 30)
        self.label.setGeometry(10, 40, 500, 170)

        pictureButton.clicked.connect(self.pictureOpenFunction)
        embossButton.clicked.connect(self.embossFunction)
        cartoonButton.clicked.connect(self.cartoonFunction)
        sketchButton.clicked.connect(self.sketchFunction)
        oilButton.clicked.connect(self.oilFunction)
        saveButton.clicked.connect(self.saveFunction)
        quitButton.clicked.connect(self.quitFunction)

    def pictureOpenFunction(self):
        fname = QFileDialog.getOpenFileName(self, "사진 읽기", "./")
        self.img = cv2.imread(fname[0])
        if self.img is None:
            sys.exit("파일을 찾을 수 없습니다.")

        cv2.imshow("Painting", self.img)

    def embossFunction(self):
        femboss = np.array([[-1.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 1.0]])

        gray = cv2.cvtColor(self.img, cv2.COLOR_BGR2GRAY)
        gray16 = np.int16(gray)
        self.emboss = np.uint8(np.clip(cv2.filter2D(gray16, -1, femboss) + 128, 0, 255))

        cv2.imshow("Emboss", self.emboss)

    def cartoonFunction(self):
        self.cartoon = cv2.stylization(self.img, sigma_s=60, sigma_r=0.45)
        cv2.imshow("Cartoon", self.cartoon)

    def sketchFunction(self):
        self.sketch_gray, self.sketch_color = cv2.pencilSketch(
            self.img, sigma_s=60, sigma_r=0.07, shade_factor=0.02
        )
        cv2.imshow("Pencil sketch(gray)", self.sketch_gray)
        cv2.imshow("Pencil sketch(color)", self.sketch_color)

    def oilFunction(self):
        self.oil = cv2.xphoto.oilPainting(self.img, 10, 1, cv2.COLOR_BGR2Lab)
        cv2.imshow("Oil painting", self.oil)

    def saveFunction(self):
        fname = QFileDialog.getSaveFileName(self, "파일 저장", "./")

        i = self.pickCombo.currentIndex()
        if i == 0:
            cv2.imwrite(fname[0], self.emboss)
        elif i == 1:
            cv2.imwrite(fname[0], self.cartoon)
        elif i == 2:
            cv2.imwrite(fname[0], self.sketch_gray)
        elif i == 3:
            cv2.imwrite(fname[0], self.sketch_color)
        elif i == 4:
            cv2.imwrite(fname[0], self.oil)

    def quitFunction(self):
        cv2.destroyAllWindows()
        self.close()


app = QApplication(sys.argv)
win = SpecialEffect()
win.show()
app.exec()
</code></pre>]]></content><author><name></name></author><category term="computervision" /><summary type="html"><![CDATA[사진 영상에 특수 효과 처리 ```pyhton import cv2 import numpy as np from PyQt6.QtWidgets import * import sys]]></summary></entry><entry><title type="html">voc_data3</title><link href="http://localhost:4000/hnv/2024/11/11/voc_data3.html" rel="alternate" type="text/html" title="voc_data3" /><published>2024-11-11T00:00:00+09:00</published><updated>2024-11-11T00:00:00+09:00</updated><id>http://localhost:4000/hnv/2024/11/11/voc_data3</id><content type="html" xml:base="http://localhost:4000/hnv/2024/11/11/voc_data3.html"><![CDATA[<h1 id="segmentation-data">segmentation data</h1>
<p>세분화에는 원본, 객체 분할 이미지, 클래스 세분화 이미지가 필요하다.</p>
<ul>
  <li>원본은 JPEGImages</li>
  <li>객체 분할 이미지는 SegmentationClass</li>
  <li>클래스 세분화 이미지는 SegmentationObject에 있다</li>
  <li>ImageSets에 있는 segmetation에서 train, trainval, val에 뭘 쓸것인지 적혀 있다, 해당 내용을 읽어와서 해당 파일의 이름을 학습 시키면 될듯 (<em>한가지 걸리는건 ImageSets안에 있는 Action,Layout,Main 폴더가 어떤 용도인지 확실히 모르겠다는 것, 아마 다른 task에 활용되는 듯</em>)</li>
  <li>Annotaions에는 boundbox가 있는 걸 보니 filename으로 읽어오고 박스를 활용하면 될 듯</li>
</ul>]]></content><author><name></name></author><category term="hnv" /><summary type="html"><![CDATA[segmentation data 세분화에는 원본, 객체 분할 이미지, 클래스 세분화 이미지가 필요하다. 원본은 JPEGImages 객체 분할 이미지는 SegmentationClass 클래스 세분화 이미지는 SegmentationObject에 있다 ImageSets에 있는 segmetation에서 train, trainval, val에 뭘 쓸것인지 적혀 있다, 해당 내용을 읽어와서 해당 파일의 이름을 학습 시키면 될듯 (한가지 걸리는건 ImageSets안에 있는 Action,Layout,Main 폴더가 어떤 용도인지 확실히 모르겠다는 것, 아마 다른 task에 활용되는 듯) Annotaions에는 boundbox가 있는 걸 보니 filename으로 읽어오고 박스를 활용하면 될 듯]]></summary></entry><entry><title type="html">voc_data2</title><link href="http://localhost:4000/hnv/2024/11/11/voc_data2.html" rel="alternate" type="text/html" title="voc_data2" /><published>2024-11-11T00:00:00+09:00</published><updated>2024-11-11T00:00:00+09:00</updated><id>http://localhost:4000/hnv/2024/11/11/voc_data2</id><content type="html" xml:base="http://localhost:4000/hnv/2024/11/11/voc_data2.html"><![CDATA[<h1 id="데이터-파악">데이터 파악</h1>

<h3 id="액션-분류-대회">액션 분류 대회</h3>
<p><img src="image-1.png" alt="alt text" /><br />
-동작 분류: 정지 이미지에서 사람이 수행하는 동작을 예측</p>

<h3 id="imagenet-대규모-시각-인식-대회">imageNet 대규모 시각 인식 대회</h3>
<ul>
  <li>이 대회의 목표는 대구모 수작업 레이블이 지정된 imageNet 데이터 세트의 하위 집합을 훈련으로 사용</li>
  <li>검색 및 자동 주석을 목적으로 사진의 내용 추정</li>
  <li>테스트 이미지는 초기 주석 없이, 즉 세분화나 레이블 없이 제공</li>
  <li>알고리즘은 이미지에 있는 객체를 지정하는 레이블을 생성해야 함</li>
</ul>

<h3 id="사람-레이아웃-테이스터-경연대회">사람 레이아웃 테이스터 경연대회</h3>
<ul>
  <li>사람 레이아웃: 사람의 각 부분의 경계 상자와 레이블을 예측
<img src="image-2.png" alt="alt text" /></li>
</ul>

<hr />

<h3 id="데이터">데이터</h3>
<p>-제공된 훈련 데이터는 이미지 세트로 구성</p>
<ul>
  <li>각 이미지에는 이미지에 있는 20개 클래스 중 하나에 있는 각 객체에 대한 경계 상자와 객체 클래스 레이블을 제공하는 주석 파일이 있음.</li>
  <li>여러 클래스의 여러 객체가 동일한 이미지에 존재할 수 있다.</li>
  <li>이미지의 하위 집합에는 각 객체를 픽셀 단위로 분할하여 주석을 달아 분할 대회 지원</li>
  <li>액션 분류 작업의 이미지는 분류/탐지/분할 작업의 이미지와 분리되어있음
    <ul>
      <li>사람, 경계 상자, 참조점 및 해당 액션이 부분적으로 주석으로 표시됨</li>
    </ul>
  </li>
</ul>

<hr />

<p>세분화 테스터를 위한 교육 예시는 다음과 같습니다. 각각은 다음으로 구성됩니다.</p>

<p>훈련 이미지
객체 분할
픽셀 인덱스는 첫 번째, 두 번째, 세 번째 객체 등에 대응합니다.
클래스 세분화
픽셀 인덱스는 알파벳 순으로 클래스에 대응합니다(1=비행기, 2=자전거, 3=새, 4=보트, 5=병, 6=버스, 7=자동차, 8=고양이, 9=의자, 10=소, 11=식탁, 12=개, 13=말, 14=오토바이, 15=사람, 16=분재 식물, 17=양, 18=소파, 19=기차, 20=TV/모니터)
두 가지 유형의 분할 이미지 모두에서 인덱스 0은 배경에 해당하고 인덱스 255는 ‘무효’ 또는 레이블이 지정되지 않은 것에 해당합니다.</p>

<p>| http://host.robots.ox.ac.uk/pascal/VOC/voc2012/segexamples/index.html
(<em>세분화 이미지 예시</em>)</p>]]></content><author><name></name></author><category term="hnv" /><summary type="html"><![CDATA[데이터 파악]]></summary></entry><entry><title type="html">segmentaion1</title><link href="http://localhost:4000/hnv/2024/11/11/segmentaion.html" rel="alternate" type="text/html" title="segmentaion1" /><published>2024-11-11T00:00:00+09:00</published><updated>2024-11-11T00:00:00+09:00</updated><id>http://localhost:4000/hnv/2024/11/11/segmentaion</id><content type="html" xml:base="http://localhost:4000/hnv/2024/11/11/segmentaion.html"><![CDATA[<h1 id="계획을-세워보자">계획을 세워보자</h1>
<p>와 3줄 이상 있으면 뇌가 멈춰오는 나로서는 To-do list를 보는 것만으로도 힘이든다ㅠ.ㅜ</p>

<h3 id="todo">todo</h3>
<ol>
  <li>본인이 부여받은 Task directory에 데이터셋을 다운</li>
  <li>비어있는 파일 작성 및 코드 수정</li>
  <li>lightning과 hydra-template만 작성하면 됨 (pytorch는 안해도 됨)</li>
</ol>

<p>1번과 3번은 수행 및 이해 했기에 pass<br />
2번은 | https://github.com/hnvlab-syu/pytorch-course/tree/master/pytorch-course/semantic-segmentation/pascal 에서 말 그대로 비어있는 파일 <em>(ex pytorch-course/pytorch-course/semantic-segmentation/pascal/lightning
/main.py)</em> 을 채우면 된다는 의미</p>

<hr />

<p>그럼 뭘 작성해야 하는지 lightning만 한번 보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/main.py
/README.md
/src/dataset.py
/src/model.py
/src/utils.py
</code></pre></div></div>
<p>hydra-template는 내가 진짜로 오늘 처음 봐서 뭐가 뭔지 하나도 모르겠으니 일단 pass</p>

<h3 id="todo-1">todo</h3>
<ol>
  <li>data augmentation 1개 이상 적용 (e.g. rotation, flip, etc.)</li>
  <li>모델 두개 이상 불러와서 사용자가 선택해서 작동할 수 있도록 (pretrained 된걸 불러와야함)</li>
  <li>lightning argparser 그대로 사용 (필요하다면 추가 해도됨)</li>
</ol>

<p>4번은 그냥 기능 적용하면 될거 같고</p>

<p>5번에 대해서 설명을 하자면</p>
<h3 id="lightning에서-여러-모델을-선택적으로-사용하는-방법">Lightning에서 여러 모델을 선택적으로 사용하는 방법</h3>
<ol>
  <li>
    <p>여러 모델 정의: 필요한 만큼의 모델을 Lightning 모듈로 정의할 수 있습니다.</p>
  </li>
  <li>
    <p>사용자 선택을 위한 파라미터 추가: Trainer 또는 LightningModule 내에서 모델 선택을 위한 인자를 받아서 초기화 시 사용자가 선택할 수 있도록 합니다. 예를 들어, model_name 또는 model_type 인자를 통해 조건에 따라 모델을 결정할 수 있습니다.</p>
  </li>
  <li>
    <p>Forward 메서드 수정: forward 메서드에서 model_name 값에 따라 다른 모델을 선택하여 입력을 처리하게 합니다.</p>
  </li>
  <li>
    <p>모델 선택 로직 작성: 사용자가 선택한 모델에 따라 조건을 걸어 해당 모델을 사용할 수 있도록 구현합니다.</p>
  </li>
</ol>

<p>를 하면 된다고 한다.</p>

<h3 id="6번-lightning-argparser란">6번 lightning argparser란?</h3>
<ul>
  <li>PyTorch Lightning에서 모델의 하이퍼파라미터, 학습 설정, 기타 옵션을 쉽게 설정하고 관리할 수 있도록 하는 인자 파싱 도구입니다.</li>
  <li>이를 통해 다양한 설정을 명령줄 인자나 구성 파일을 통해 전달할 수 있습니다</li>
</ul>

<h1 id="lightning-argparser-사용-방법">Lightning ArgParser 사용 방법</h1>
<ul>
  <li>
    <p>ArgumentParser 정의: 필요한 하이퍼파라미터와 설정을 argparse.ArgumentParser로 정의합니다.</p>
  </li>
  <li>LightningModule과 Trainer에 인자 전달: 정의된 인자를 LightningModule이나 Trainer에 전달하여 설정할 수 있습니다.</li>
  <li>이로 인해 모델 설정, 데이터 설정, 학습 설정 등을 명령줄 인자에서 쉽게 변경할 수 있습니다.</li>
  <li>명령줄에서 실행: 스크립트를 실행할 때 명령줄 인자로 값을 전달할 수 있으며, 이를 통해 다양한 하이퍼파라미터 실험을 쉽게 반복할 수 있습니다.</li>
</ul>

<h1 id="todo-2">todo</h1>
<ol>
  <li>wandb에 loss와 metric을 모두 나타내야함</li>
  <li>최종 결과 제출은 hnvlab-syu/pytorch-course github에 pull request</li>
  <li>본인이 사용한 모델 두개 중 하나 논문 발표 (류교수님의 특별 지시)</li>
</ol>

<p>그럼 일단 imagenet에 있는 코드에서</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/README.md
/main.py
/src/dataset.py
/src/model.py
/src/utils.py
</code></pre></div></div>
<p>를 보고 클론 코딩 해보자</p>]]></content><author><name></name></author><category term="hnv" /><summary type="html"><![CDATA[계획을 세워보자 와 3줄 이상 있으면 뇌가 멈춰오는 나로서는 To-do list를 보는 것만으로도 힘이든다ㅠ.ㅜ]]></summary></entry></feed>