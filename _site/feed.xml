<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-11T09:43:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">RabbitJun’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">model2</title><link href="http://localhost:4000/objectdetection/2024/07/10/objectdetection2.html" rel="alternate" type="text/html" title="model2" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/07/10/objectdetection2</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/07/10/objectdetection2.html"><![CDATA[<h1 id="anchor">anchor</h1>
<p>https://github.com/chullhwan-song/Reading-Paper/issues/184
<img src="/assets/hnv/anchor.png" alt="anchor box" /></p>
<ul>
  <li>[0, 0, 256, 256] &gt; [ y center, x center, h, w] 인 사각형을 기준으로 하여 aspect ratio 가 0.5, 1, 2인 사각형을 한 개씩 만든다
    <ul>
      <li>그럼 base anchor가 3개 만들어짐</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enum_scales</span><span class="p">(</span><span class="n">base_anchor</span><span class="p">,</span> <span class="n">anchor_scales</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">enum_scales</span><span class="sh">'</span><span class="p">):</span>

    <span class="sh">'''</span><span class="s">
    :param base_anchor: [y_center, x_center, h, w]
    :param anchor_scales: different scales, like [0.5, 1., 2.0]
    :return: return base anchors in different scales.
            Example:[[0, 0, 128, 128],[0, 0, 256, 256],[0, 0, 512, 512]]
    </span><span class="sh">'''</span>
    <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="nf">variable_scope</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">anchor_scales</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">anchor_scales</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>  <span class="c1"># torh.reshape(anchor_scales, [-1,1])
</span>
        <span class="k">return</span> <span class="n">base_anchor</span> <span class="o">*</span> <span class="n">anchor_scales</span>
</code></pre></div></div>

<p><img src="/assets/hnv/reshape.png" alt="reshape" /><br />
<img src="/assets/hnv/reshape_output.png" alt="reshape" /><br />
각 인덴스는 해당 차원의 요소의 개수를 의미하며 -1은 자동으로 나머지 차원의 수에 맞게 요소의 개수를 조정하라는 의미</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enum_ratios</span><span class="p">(</span><span class="n">anchors</span><span class="p">,</span> <span class="n">anchor_ratios</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">enum_ratios</span><span class="sh">'</span><span class="p">):</span>

    <span class="sh">'''</span><span class="s">
    :param anchors: base anchors in different scales
    :param anchor_ratios:  ratio = h / w
    :return: base anchors in different scales and ratios
    </span><span class="sh">'''</span>

    <span class="k">with</span> <span class="n">tf</span><span class="p">.</span><span class="nf">variable_scope</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">hs</span><span class="p">,</span> <span class="n">ws</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">unstack</span><span class="p">(</span><span class="n">anchors</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># torch에서는 axis 대신 dim,  unstack 대신 unbind 을 사용
</span>        <span class="n">sqrt_ratios</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">anchor_ratios</span><span class="p">)</span>
        <span class="n">sqrt_ratios</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">sqrt_ratios</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># torch는 unsqueeze(sqrt_ratios, dim=1)
</span>        <span class="n">ws</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">ws</span> <span class="o">/</span> <span class="n">sqrt_ratios</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">hs</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">hs</span> <span class="o">*</span> <span class="n">sqrt_ratios</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="c1"># assert tf.shape(ws) == tf.shape(hs), 'h shape is not equal w shape'
</span>
        <span class="n">num_anchors_per_location</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">ws</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># torch에서는 tensor.shape
</span>
        <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">tf</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="n">num_anchors_per_location</span><span class="p">,</span> <span class="p">]),</span>
                                      <span class="n">tf</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="n">num_anchors_per_location</span><span class="p">,]),</span>
                                      <span class="n">ws</span><span class="p">,</span> <span class="n">hs</span><span class="p">]))</span>
</code></pre></div></div>
<p><img src="/assets/hnv/axis.png" alt="axis" />
axis는 그냥 바깥쪽에서 부터 0 으로 시작해서 안쪽으로 으로 들어갈수록 수가 커지게<br />
axis를 그냥 방향이라고 생각하면 될 듯</p>

<pre>
array([[0, 1, 2],

       [3, 4, 5]])이면
axis=0 은 [0, 1, 2] - &gt; [3, 4, 5] 
axis=1 은 0 -&gt; 1 -&gt; 2 또는 3-&gt; 4 -&gt; 5
같은 방향을 향하는 애들끼리 같이 묶여 있다고 생각하면 될 듯

</pre>
<h3 id="unsqueeze">unsqueeze</h3>
<p><img src="/assets/hnv/unsqueeze.png" alt="unsqueeze" /><br />
<img src="/assets/hnv/unsqueeze2.png" alt="unsqueeze" /></p>

<h3 id="shape">shape</h3>
<p><img src="/assets/hnv/shape.png" alt="shape" /></p>

<h3 id="transpose">transpose</h3>
<p><img src="/assets/hnv/transpose.png" alt="transpose" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>

    <span class="n">base_anchor</span>  <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">constant</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span> <span class="c1">#[center_y, cetner_x, h, w]
</span>    <span class="n">anchor_scales</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">constant</span><span class="p">([</span><span class="mf">1.0</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">anchor_ratios</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">constant</span><span class="p">([</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>

    <span class="n">anchor_scales_ratios</span> <span class="o">=</span> <span class="nf">enum_ratios</span><span class="p">(</span><span class="nf">enum_scales</span><span class="p">(</span><span class="n">base_anchor</span><span class="p">,</span> <span class="n">anchor_scales</span><span class="p">),</span> <span class="n">anchor_ratios</span><span class="p">)</span>
    <span class="c1"># print(anchor_scales_ratios.shape) # (3, 4) &gt; 3개의 aspect ratio당 &gt; rectangle 위치 [center_y, cetner_x, h, w]
</span>
    <span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nc">Session</span><span class="p">()</span>  <span class="c1"># 이제는 없어진 기능
</span>    <span class="nf">print </span><span class="p">(</span><span class="n">sess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">anchor_scales_ratios</span><span class="p">))</span>
    <span class="c1"># [center_y, cetner_x, h, w] 이므로, 중심(x, y) = (0, 0), (w, h) = (362.03867, 181.01933)
</span>    <span class="c1"># [[  0.        0.      362.03867 181.01933] # 0.5
</span>    <span class="c1"># [  0.        0.      256.      256.     ]  # 1.0
</span>    <span class="c1"># [  0.        0.      181.01933 362.03867]] # 2.0 &lt;aspect ratio
</span></code></pre></div></div>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[anchor https://github.com/chullhwan-song/Reading-Paper/issues/184 [0, 0, 256, 256] &gt; [ y center, x center, h, w] 인 사각형을 기준으로 하여 aspect ratio 가 0.5, 1, 2인 사각형을 한 개씩 만든다 그럼 base anchor가 3개 만들어짐]]></summary></entry><entry><title type="html">model3</title><link href="http://localhost:4000/objectdetection/2024/07/10/objectdetection3.html" rel="alternate" type="text/html" title="model3" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/07/10/objectdetection3</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/07/10/objectdetection3.html"><![CDATA[<p>https://github.com/chullhwan-song/Reading-Paper/issues/184</p>

<h1 id="anchor">anchor</h1>

<p><img src="/assets/hnv/anchor2.png" alt="anchor" />
anchor(3개짜리)가 각 크기별로 입력값을 훝고 지나감 -&gt; 총 9개가 생성<br />
이에관한 소스까지 공부하기에는 따로 공부해야 할 것 같아서 패스함</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">self</span><span class="p">.</span><span class="n">anchor_generator</span> <span class="o">=</span> <span class="nc">AnchorGenerator</span><span class="p">(</span><span class="n">sizes</span><span class="o">=</span><span class="p">((</span><span class="mi">32</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">512</span><span class="p">),),</span>
                                        <span class="n">aspect_ratios</span><span class="o">=</span><span class="p">((</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">),))</span>
</code></pre></div></div>
<p><img src="/assets/hnv/anchor3.png" alt="anchor" /></p>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[https://github.com/chullhwan-song/Reading-Paper/issues/184]]></summary></entry><entry><title type="html">model4</title><link href="http://localhost:4000/objectdetection/2024/07/10/objectdetection4.html" rel="alternate" type="text/html" title="model4" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/07/10/objectdetection4</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/07/10/objectdetection4.html"><![CDATA[<h1 id="multiscaleroialign">MultiScaleRoIAlign</h1>
<ul>
  <li>ROI 풀링 수행</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">self</span><span class="p">.</span><span class="n">roi_pooler</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nc">MultiScaleRoIAlign</span><span class="p">(</span><span class="n">featmap_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">],</span>
                                                        <span class="n">output_size</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span>
                                                        <span class="n">sampling_ratio</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<pre>
featmap_names=['0']: ROI를 추출할 특성 맵의 이름입니다. 여기서는 '0'이라는 이름의 특성 맵만 사용합니다.

output_size=7: 생성할 특성 맵의 고정된 크기입니다. 여기서는 7x7 크기의 특성 맵을 생성합니다.

sampling_ratio=2: ROI를 7x7 크기로 변환할 때 사용되는 샘플링 비율입니다. 이는 보다 정확한 특성 맵을 얻기 위해 입력 영역을 얼마나 세밀하게 샘플링할지 결정합니다.
</pre>

<h3 id="pooing">pooing</h3>

<p><img src="/assets/hnv/pooling.png" alt="pooling" /></p>

<h3 id="refinement">refinement</h3>
<ol>
  <li>region proposal 생성
    <ul>
      <li>입력 이미지에서 후보 객체 영역 제안</li>
    </ul>
  </li>
  <li>ROI 풀링
    <ul>
      <li>후보 객체 영역을 특성 맵에서 추출</li>
      <li>ROI를 고정된 크기의 특성 맵으로 변환하여 동일한 크기의 입력을 FC레이어에 전달</li>
    </ul>
  </li>
  <li>FC레이어
    <ul>
      <li>최종 객체 분류와 위치 조정 수행</li>
    </ul>
  </li>
</ol>

<p><strong>ROI는 Region of Interset</strong></p>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[MultiScaleRoIAlign ROI 풀링 수행]]></summary></entry><entry><title type="html">utils</title><link href="http://localhost:4000/objectdetection/2024/07/10/utils.html" rel="alternate" type="text/html" title="utils" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/07/10/utils</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/07/10/utils.html"><![CDATA[<h3 id="dfsamplefrac1reset_indexdroptrue">df.sample(frac=1).reset_index(drop=True)</h3>
<ul>
  <li>df: 샘플링할(shuffle) pandas 데이터프래임</li>
  <li>frac=1: 전체 데이터프레임에서 샘플링할 비율을 나타냅니다.
    <ul>
      <li><img src="/assets/hnv/frac.png" alt="frac" /></li>
    </ul>
  </li>
  <li>reset_index(drop=True) : 샘플링 후 인덱스를 재설정
    <ul>
      <li>drop=Trup를 설정하면 이전 인덱스를 삭제하고 새로운 연속된 인덱스를 할당</li>
    </ul>
  </li>
</ul>

<h3 id="pdconcat">pd.concat()</h3>
<ul>
  <li>데이터 프레임이나 series를 연결 (concatenate)
<img src="/assets/hnv/concat.png" alt="cocnat" /></li>
</ul>

<h3 id="ospathlike">os.PathLike</h3>
<ul>
  <li>시스템 경로를 나타내는 것</li>
</ul>

<h3 id="to_cococsv_path">to_coco(csv_path)</h3>
<ul>
  <li>coco 데이터셋의 json 파일로 변환하는 작업 수행</li>
</ul>

<h3 id="cocojson_path">COCO(json_path)</h3>
<ul>
  <li>coco 클래스의 객체를 생성
    <ul>
      <li>코코 데이터셋의 json 파일 파싱하고 데이터셋의 이미지, 객체 정보 등을 구조화된 형태로 메모리에 로드</li>
    </ul>
  </li>
</ul>

<h3 id="map">MAP</h3>

<p><img src="/assets/hnv/MAP.png" alt="MAP" /></p>
<hr />

<p><img src="/assets/hnv/precision_recall.png" alt="precision_recall" /></p>
<hr />

<h3 id="iou">iou</h3>
<p><img src="/assets/hnv/iou.png" alt="iou" /><br />
<strong>예측된 바운더리 박스 &amp; 사용자가 설정한 바운더리 박스 / 예측된 바운더리 박스 | 사용자가 설정한 바운더리 박스</strong></p>
<ul>
  <li>iou &gt;= 0.5:  tp else: fp</li>
</ul>

<hr />

<h3 id="precision">precision</h3>
<p><img src="/assets/hnv/precision.png" alt="precision" /></p>
<ul>
  <li>검출 결과들 중 옳게 검출한 비율</li>
  <li>fp를 줄이는게 더 중요한 경우</li>
</ul>
<hr />

<h3 id="recall">recall</h3>
<p><img src="/assets/hnv/recall.png" alt="recall" /></p>
<ul>
  <li>fn을 줄이는게 더 중요한 경우</li>
</ul>
<hr />

<h3 id="pr-curve">PR Curve</h3>
<p><img src="/assets/hnv/confidence.png" alt="confidence" /></p>
<ul>
  <li>confidence 레벨이 높을수록 알고리즘은 그 물체가 검출해야 하는 물체와 거이 똑같다고 생각</li>
  <li>threshold(한게점)을 두어 특정값 이상이 되어야 검출된 것으로 인정 <strong>ex)한계값을 90%으로 했다면 한개만 검출된 것으로 판단</strong>
    <ul>
      <li>precision 1/1, recall = 1/15
<img src="/assets/hnv/confidence2.png" alt="confidence" /></li>
    </ul>
  </li>
</ul>

<p><img src="/assets/hnv/PRCurve.png" alt="PR Curve" /></p>

<hr />

<h3 id="average-precision">Average Precision</h3>

<p><img src="/assets/hnv/ap.png" alt="ap" /></p>
<ul>
  <li>물체 클래스가 여러개인 경우 각 클래스당 ap를 구한 다음에 그것을 모두 합한 다음에 물체 클래스의 개수로 나눠주면 그게 map</li>
</ul>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[df.sample(frac=1).reset_index(drop=True) df: 샘플링할(shuffle) pandas 데이터프래임 frac=1: 전체 데이터프레임에서 샘플링할 비율을 나타냅니다. reset_index(drop=True) : 샘플링 후 인덱스를 재설정 drop=Trup를 설정하면 이전 인덱스를 삭제하고 새로운 연속된 인덱스를 할당]]></summary></entry><entry><title type="html">utils2</title><link href="http://localhost:4000/objectdetection/2024/07/10/utils2.html" rel="alternate" type="text/html" title="utils2" /><published>2024-07-10T00:00:00+09:00</published><updated>2024-07-10T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/07/10/utils2</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/07/10/utils2.html"><![CDATA[<h1 id="grouped_dict--image_id-group-for-image_id-group-in-grouped">grouped_dict = {image_id: group for image_id, group in grouped}</h1>

<p><img src="/assets/hnv/image_id.png" alt="image_id" /></p>

<p><img src="/assets/hnv/group.png" alt="group" /></p>

<h1 id="iterrows">iterrows()</h1>
<ul>
  <li>iterrows()는 Pandas 데이터프레임의 메서드로, 데이터프레임의 각 행을 반복(iterate)하면서 인덱스와 행 데이터를 튜플로 반환합니다.</li>
</ul>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[grouped_dict = {image_id: group for image_id, group in grouped}]]></summary></entry><entry><title type="html">webcrawling</title><link href="http://localhost:4000/webcrawling/2024/06/27/webcrawling.html" rel="alternate" type="text/html" title="webcrawling" /><published>2024-06-27T00:00:00+09:00</published><updated>2024-06-27T00:00:00+09:00</updated><id>http://localhost:4000/webcrawling/2024/06/27/webcrawling</id><content type="html" xml:base="http://localhost:4000/webcrawling/2024/06/27/webcrawling.html"><![CDATA[<h1 id="웹-크롤링을-종료시키는-방법-스크롤의-한계에-도달하면-종료하기">웹 크롤링을 종료시키는 방법 (스크롤의 한계에 도달하면 종료하기)</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">form</span> <span class="n">selenium</span><span class="p">.</span><span class="n">webdriver</span><span class="p">.</span><span class="n">common</span><span class="p">.</span><span class="n">by</span> <span class="kn">import</span> <span class="n">By</span> <span class="c1"># Selenium의 By 클래스 임포트
</span><span class="k">def</span> <span class="nf">find_end</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>	<span class="n">last_height</span> <span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="err">’</span><span class="k">return</span> <span class="n">document</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">scrollHeight</span><span class="err">’</span><span class="p">)</span>
	<span class="c1">#  변수에 현재 페이지의 전체 높이를 저장.
</span>	<span class="c1">#  self.driver.execute_script()를 사용하여 JavaScript 코드 실행
</span>	<span class="c1"># document. body.scrollHeight 값을 반환
</span>	<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
		<span class="n">self</span><span class="p">.</span><span class="n">drivier</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="err">“</span><span class="n">window</span><span class="p">.</span><span class="nf">scrollto</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">document</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">scrollHeight</span><span class="p">);</span><span class="err">”</span><span class="p">)</span> <span class="c1">#  “window.xcrolto(0, document.body.scrollHeight);”  x= 0, y= document.body.scrollHeight, 즉 수평 스크롤 위치를 0으로 이동 수직 스크롤 위치를 전체 높이( 최하단)으로 이동 -&gt; 스크롤 최하단으로 이동 
</span>		<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 페이지 로드를 기달리기 위한 2초 대기
</span>		<span class="k">try</span><span class="p">:</span>
			<span class="n">more_button</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">XPATH</span><span class="p">,</span> <span class="err">“</span><span class="o">//</span><span class="n">button</span><span class="p">[</span><span class="nf">contains</span><span class="p">(</span><span class="nf">text</span><span class="p">(),</span> <span class="err">‘</span><span class="n">더보기</span><span class="err">’</span><span class="p">)]</span><span class="err">”</span><span class="p">)</span>  <span class="c1"># XPATH를 사용하여 텍스트에“ 더보기”가 포함된 버튼을 찾는다
</span> <span class="c1">#  XPATH는 XML Path Language의 약자로, XML 및 HTML 문서 내의 노드를 찾는데 사용 (&lt;div&gt;, &lt;p&gt;, &lt;a&gt; 등의 태그)
</span>			<span class="n">more_button</span><span class="p">.</span><span class="nf">click</span><span class="p">()</span>  <span class="c1"># 찾은 버튼 클릭
</span>			<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
		<span class="k">except</span><span class="p">:</span>
			<span class="k">pass</span>
		<span class="n">new_height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="err">“</span><span class="k">return</span> <span class="n">document</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">scrollHeight</span><span class="err">”</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">new_height</span> <span class="o">==</span> <span class="n">last_height</span><span class="p">:</span>
			<span class="n">self</span><span class="p">.</span><span class="n">end_point</span> <span class="o">=</span> <span class="bp">True</span>
			<span class="k">break</span>
		
</code></pre></div></div>
<p>나는 def scroll_down(self)를 이미 정의 했기에 스크롤 내리는 부분을 뺀다 <br />
self.scroll_down()  클래스 내에서 함수를 쓸 때는 self를 접두어로</p>

<p>원래 코드: self.src_values에 새로운 값을 할당합니다. 이 방식은 각 호출에서 self.src_values의 기존 내용을 덮어씁니다. 결과적으로, 마지막 find_src 호출 후의 값만 유지됩니다.<br />
수정된 코드: self.src_values.extend를 사용하여 기존 리스트에 새로 찾은 값을 추가합니다. <br />
이 방식은 각 호출에서 self.src_values의 기존 내용을 보존하면서 새 값을 추가합니다. 이를 통해 모든 URL에서 찾은 모든 이미지를 self.src_values에 저장할 수 있습니다.</p>

<p>원래 코드</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">last_height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="sh">"</span><span class="s">return document.body.scrollHeight</span><span class="sh">"</span><span class="p">)</span>
<span class="n">new_height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="sh">"</span><span class="s">return document.body.scrollHeight</span><span class="sh">"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">new_height</span> <span class="o">==</span> <span class="n">last_height</span><span class="p">:</span>
    <span class="n">self</span><span class="p">.</span><span class="n">end_point</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<p>수정된 코드</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_end</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">last_height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="sh">"</span><span class="s">return document.body.scrollHeight</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 수정: 대기 시간 추가
</span>    <span class="n">new_height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="sh">"</span><span class="s">return document.body.scrollHeight</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">end_point</span> <span class="o">=</span> <span class="n">new_height</span> <span class="o">==</span> <span class="n">last_height</span>  <span class="c1"># 수정: end_point 업데이트 위치 변경
</span></code></pre></div></div>

<p>원래 코드: last_height와 new_height를 거의 동시에 계산합니다. 이는 두 값이 항상 동일하여 self.end_point가 항상 True가 됩니다.</p>

<p>수정된 코드:</p>
<ul>
  <li>last_height를 먼저 계산하고, 약간의 대기 시간을 추가(time.sleep(2))하여 페이지가 스크롤된 후 새로 고침된 높이를 반영할 시간을 줍니다.</li>
  <li>새로 고침된 후의 높이(new_height)를 다시 계산하여 이전 높이(last_height)와 비교합니다.</li>
  <li>new_height와 last_height가 동일하면 더 이상 스크롤할 내용이 없다는 것을 의미하므로 self.end_point를 True로 설정합니다.</li>
</ul>

<p>extend는 리스트의 메서드로서 리스트에 다른 리스트의 모든 요소를 추가할 때 사용합니다. 따라서 extend 메서드를 호출하여 리스트를 확장해야 합니다.</p>

<p>잘못된 코드:<br />
self.src_values.extend = [img.get_attribute(“src”) for img in img_tags if keyword in img.get_attribute(“alt”)]</p>

<p>올바른 코드:<br />
self.src_values.extend([img.get_attribute(“src”) for img in img_tags if keyword in img.get_attribute(“alt”)]</p>

<p>문제점</p>
<ol>
  <li>드라이버 초기화 이전에 스크립트 실행:
    <ul>
      <li>self.driver는 None으로 초기화되어 있습니다.</li>
      <li>따라서 self.driver.execute_script(“return document.body.scrollHeight”)를 호출하면 self.driver가 NoneType이므로, 이를 호출할 수 없다는 오류가 발생합니다</li>
    </ul>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err"> </span> <span class="err"> </span> <span class="c1"># end 포인트를 찾기위한 함수
</span><span class="err"> </span> <span class="err"> </span> <span class="k">def</span> <span class="nf">find_end</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">end_find</span> <span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="nf">find_elements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TAG_NAME</span><span class="p">,</span> <span class="sh">"</span><span class="s">span</span><span class="sh">"</span><span class="p">)</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="n">end</span> <span class="ow">in</span> <span class="n">end_find</span><span class="p">:</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span> <span class="n">end</span><span class="p">.</span><span class="n">text</span> <span class="o">==</span><span class="sh">'</span><span class="s">대한민국</span><span class="sh">'</span><span class="p">:</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">self</span><span class="p">.</span><span class="n">end_point</span> <span class="o">=</span><span class="bp">True</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">End of content found</span><span class="sh">"</span><span class="p">)</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">break</span>
</code></pre></div></div>

<p>스크롤 내리기 전이랑 내린 후랑 스크롤의 값이 같아서 크롤링이 안됨<br />
그냥 span에서 대한민국 찾으면 끝나는걸로 변경</p>

<p>스크롤을 내린 후에도 document.body.scrollHeight가 변하지 않는 경우<br />
이 문제는 페이지가 동적으로 콘텐츠를 로드하지 않거나 스크롤 이벤트가 제대로 적용되지 않는 경우 발생할 수 있습니다.<br />
스크롤을 내리더라도 페이지가 새로운 콘텐츠를 로드하지 않는다면 높이가 변하지 않습니다.<br />
스크롤 내리기 전에 scroll_from_origin 값을 변경했을 때 document.body.scrollHeight가 변하는 경우<br />
이 문제는 페이지가 초기 로딩 후 스크롤 이벤트를 기다리는 상태이기 때문에 발생할 수 있습니다.<br />
페이지는 초기 높이를 다르게 계산할 수 있으며, JavaScript를 통해 스크롤 이벤트를 직접 발생시켜 높이의 변화를 유도할 수 있습니다.<br />
스크롤 이벤트가 적용되지 않는 이유</p>

<p>스크롤 이벤트가 제대로 발생하지 않는 이유는 여러 가지가 있습니다</p>
<ol>
  <li>페이지가 스크롤 이벤트에 반응하지 않음.</li>
  <li>스크롤 이벤트가 발생하더라도 새로운 콘텐츠가 로드되지 않음.</li>
  <li>스크롤 이벤트가 페이지의 특정 부분에만 적용되어 전체 페이지의 높이가 변하지 않음.</li>
</ol>]]></content><author><name></name></author><category term="webcrawling" /><summary type="html"><![CDATA[웹 크롤링을 종료시키는 방법 (스크롤의 한계에 도달하면 종료하기)]]></summary></entry><entry><title type="html">model</title><link href="http://localhost:4000/objectdetection/2024/06/27/objectdetection.html" rel="alternate" type="text/html" title="model" /><published>2024-06-27T00:00:00+09:00</published><updated>2024-06-27T00:00:00+09:00</updated><id>http://localhost:4000/objectdetection/2024/06/27/objectdetection</id><content type="html" xml:base="http://localhost:4000/objectdetection/2024/06/27/objectdetection.html"><![CDATA[<p>torchvision.models:<br />
https://github.com/pytorch/vision/tree/main/torchvision/models</p>

<h1 id="torchvisiondetection">torchvision.detection</h1>
<ul>
  <li>torchvisoin.detection은 Pytorch의 컴퓨터 비전 관련 유틸리티를 제공하는 패키지의 하위 모듈로, 주로 객체 탐지와 관련된 기능들을 제공</li>
</ul>

<h1 id="torchvisiondetectionrpn">torchvision.detection.rpn</h1>
<ul>
  <li>Resion Proposal Network</li>
  <li>입력 이미지에서 객체가 있을 가능성이 높은 영역 (Region of interest)을 제안하는 역할</li>
  <li>이를 통해 객체 탐지 모델이 전체 이미지에서 객체를 일일이 찾는 대신, 제안된 후보 영역들에 집중하여 효율적으로 탐지 작업을 수행할 수 있다</li>
</ul>

<h1 id="backbone">Backbone</h1>
<ul>
  <li>특징 추출을 담당하는 기본 신경망을 의미
    <ul>
      <li>객체 탐지, 이미지 분할, 이미지 분류 등의 다양한 비전 모델에서 중요한 역할을 합니다.</li>
      <li>입력 이미지에서 의미 있는 특징 맵을 추출하여 후속처리 단계(객체의 경계 상자 예측, 등)에 사용</li>
    </ul>
  </li>
  <li>대표적으로 ResNet, VGG. EfficientNet, MobileNet 등이 있음</li>
  <li>ex)
```python
      self.backbone = efficientnet_b0(weights=EfficientNet_B0_Weights.DEFAULT).features
      self.backbone.out_channels = 1280  #   EfficientNet-B0의 마지막 특징 맵의 출력 채널 수는 1280</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">torchvision.models</span> <span class="kn">import</span> <span class="n">efficientnet_b0</span><span class="p">,</span> <span class="n">EfficientNet_B0_Weights</span>

<span class="c1"># EfficientNet-B0 모델 로드
</span><span class="n">model</span> <span class="o">=</span> <span class="nf">efficientnet_b0</span><span class="p">(</span><span class="n">weights</span><span class="o">=</span><span class="n">EfficientNet_B0_Weights</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">)</span>

<span class="c1"># 모델 구조 출력 (필요시 주석 해제)
# print(model)
</span>
<span class="c1"># 특징 맵의 출력 채널 수 확인
# 마지막 계층의 출력 채널 수는 모델의 특징 추출 부분의 마지막 Conv 층의 출력 채널 수와 동일합니다.
</span><span class="n">last_feature_layer</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">features</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Last feature layer output channels: </span><span class="si">{</span><span class="n">last_feature_layer</span><span class="p">.</span><span class="n">out_channels</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>def_efficient_conf(): 에 last_channel 을 보면 알 수 있음</p>]]></content><author><name></name></author><category term="objectdetection" /><summary type="html"><![CDATA[torchvision.models: https://github.com/pytorch/vision/tree/main/torchvision/models]]></summary></entry></feed>